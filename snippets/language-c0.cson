'.source.c0':
  'main()':
    'prefix': 'main'
    'body': '''
      int main() {
        ${1}

        return 0;
      }
    '''
  '#use <>':
    'prefix': 'use'
    'body': '#use <${1}>'
  'struct':
    'prefix': 'struct'
    'body': '''
      struct ${1} {
        ${2}
      };
    '''
  'for':
    'prefix': 'for'
    'body': '''
      for (int ${1:i}=${2:0}; ${1:i} ${3:< 10}; ${1:i}${4:++}) {
        ${5}
      }
    '''
  'while':
    'prefix': 'while'
    'body': '''
      while (${1:x < 10}) {
        ${2}
      }
    '''
  'if':
    'prefix': 'if'
    'body': '''
      if (${1}) {
        ${2}
      }
    '''
  'else':
    'prefix': 'else'
    'body': '''
      else {
        ${1}
      }
    '''
  'elif':
    'prefix': 'elif'
    'body': '''
      else if (${1}) {
        ${2}
      }
    '''
  'func':
    'prefix': 'func'
    'body': '''
      ${1:int} ${2:x}(${3}) {
      /*
      Input: ${4}
      Output: ${5}
      Task: ${6}
      */
      }
    '''
  'docstring':
    'prefix': 'docstring'
    'body': '''
      /*
      Input: ${1}
      Output: ${2}
      Task: ${3}
      */
    '''
  'ensure':
    'prefix': 'ensure'
    'body': '/*@ ensures ${1}; @*/'
  'require':
    'prefix': 'require'
    'body': '/*@ requires ${1}; @*/'
  'assert':
    'prefix': 'assert'
    'body': '/*@ assert ${1}; @*/'
  'loop_invariant':
    'prefix': 'loop_invariant'
    'body': '/*@ loop_invariant ${1}; @*/'
  'newline':
    'prefix': 'newline'
    'body': '''printchar('\\\\n');'''
  'debug':
    'prefix': 'debug name-value'
    'body': '''printf("${1:value}: %d\\\\n",${1:value});'''
